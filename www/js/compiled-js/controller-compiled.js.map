{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 18/11/2018.\r\n */\r\n\r\n/**\r\n* file defines all View-Models, Controllers and Event Listeners used by the app\r\n*\r\n* The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n* The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n* also used interchangeably\r\n*/\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n    /**\r\n     * method contains the startup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading App...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            if(true){ // there is a previous logged in user\r\n                // load the app main page\r\n                $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n\r\n            }\r\n            else{ // there is no previously logged in user\r\n                // load the login page\r\n                $('ons-splitter').get(0).content.load(\"login-template\");\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n\r\n                // create the pouchdb app database\r\n                utopiasoftware[utopiasoftware_app_namespace].model.appDatabase = new PouchDB('PrintServiceEcommerce.db', {\r\n                    adapter: 'cordova-sqlite',\r\n                    location: 'default',\r\n                    androidDatabaseImplementation: 2\r\n                });\r\n\r\n                // create the encrypted pouchdb app database\r\n                utopiasoftware[utopiasoftware_app_namespace].model.encryptedAppDatabase =\r\n                    new PouchDB('PrintServiceEcommerceEncrypted.db', {\r\n                    adapter: 'cordova-sqlite',\r\n                    location: 'default',\r\n                    androidDatabaseImplementation: 2\r\n                });\r\n\r\n                // generate a password for encrypting the app database (if it does NOT already exist)\r\n                if(!window.localStorage.getItem(\"utopiasoftware-oak-print-service-rid\") ||\r\n                    window.localStorage.getItem(\"utopiasoftware-oak-print-service-rid\") === \"\") {\r\n                    window.localStorage.setItem(\"utopiasoftware-oak-print-service-rid\",\r\n                        Random.uuid4(utopiasoftware[utopiasoftware_app_namespace].randomisationEngine));\r\n                }\r\n                // enable the db encryption using the generated password\r\n                await new Promise(function(resolve, reject){\r\n                    utopiasoftware[utopiasoftware_app_namespace].model.encryptedAppDatabase.\r\n                    crypto(window.localStorage.getItem(\"utopiasoftware-oak-print-service-rid\"), {\r\n                        ignore: ['_attachments', '_deleted'],\r\n                        cb: function(err, key){\r\n                            if(err){ // there is an error\r\n                                reject(err); // reject Promise\r\n                            }\r\n                            else{ // no error\r\n                                resolve(key); // resolve Promise\r\n                            }\r\n                        }});\r\n                });\r\n\r\n            }\r\n            catch(err){\r\n                console.log(\"APP LOADING ERROR\", err);\r\n            }\r\n            finally{\r\n                // set status bar color\r\n                StatusBar.backgroundColorByHexString(\"#363E7C\");\r\n                navigator.splashscreen.hide(); // hide the splashscreen\r\n                utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fully loaded and ready\r\n                $('#loader-modal').get(0).hide(); // show loader\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n    /**\r\n     * this is the view-model/controller for the Home page\r\n     */\r\n    homePageViewModel: {\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady() {\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if (!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false) {\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                $('#home-page #home-latest-design-block .row').slick({\r\n                    //adaptiveHeight: true,\r\n                    arrows: false,\r\n                    autoplay: true,\r\n                    dots: false,\r\n                    infinite: true,\r\n                    //slide: \".col-xs-5\",\r\n                    slidesToScroll: 1,\r\n                    slidesToShow: 1,\r\n                    //variableWidth: true\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: async function(){\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered whenever the puzzle menu is opened\r\n         */\r\n        async puzzleMenuOpened(){\r\n            // flag that the puzzle menu has been opened\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:opened\");\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:opened\", []));\r\n                }, 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is triggered whenever the puzzle menu is closed\r\n         */\r\n        async puzzleMenuClosed(){\r\n            // flag that the puzzle menu has been closed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:closed\");\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:closed\", []));\r\n                }, 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Exit Button on the menu is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async exitButtonClicked(){\r\n\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-sound', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // flag that Exit Button on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:exit-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            await new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:exit-clicked\", []));\r\n                }, 0);\r\n            });\r\n\r\n            let exitIndex = -1; // holds the exit index gotten from the user's confirmation of exit\r\n\r\n\r\n            // flag that the app will soon exit if the listeners do not prevent it\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:will-exit\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            let willExitEvent = await new Promise(function(resolve, reject){\r\n                setTimeout(function(){\r\n                    // lifecycle event object.\r\n                    // listeners can cancel the event that logically follows by setting its cancel property to true\r\n                    let eventObject = {};\r\n                    // define properties for the event object\r\n                    eventObject = Object.defineProperties(eventObject, {\r\n                        \"canCancel\": {\r\n                            value: true,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: false\r\n                        },\r\n                        \"isCanceled\": {\r\n                            get: function(){\r\n                                return typeof this.cancel === \"boolean\" ? this.cancel : new Boolean(this.cancel).valueOf();\r\n                            }.bind(eventObject),\r\n                            set: function(cancellation){},\r\n                            enumerable: true,\r\n                            configurable: false\r\n                        },\r\n                        \"cancel\": {\r\n                            value: false,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        },\r\n                        \"warningMessage\": {\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        }\r\n                    });\r\n\r\n                    // emit the lifecycle stage event to the listeners\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"app:will-exit\", [eventObject]);\r\n                    // resolve this promise with the event object\r\n                    resolve(eventObject);\r\n                }, 0); // end of setTimeout\r\n            });\r\n\r\n            // check if any listener whens to forestall an exit\r\n            if(willExitEvent.isCanceled === true){ // listener wants it canceled\r\n                exitIndex = await ons.notification.confirm('',\r\n                    {title: '<ons-icon icon=\"md-alert-triangle\" style=\"color: #3f51b5\" size=\"33px\"></ons-icon> <span style=\"color: #3f51b5; display: inline-block; margin-left: 1em;\">Warning</span>',\r\n                        messageHTML: `${willExitEvent.warningMessage}<br><br>Do you want to close the app?`,\r\n                        buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'});\r\n            }\r\n            else{ // no listener wants to cancel, so find out directly from user if they want to exit\r\n                exitIndex = await ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                    buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}); // Ask for confirmation\r\n            }\r\n\r\n            // check if the user decided to exit the app\r\n            if (exitIndex === 1) { // user want to exit\r\n                // flag that the app has exited\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:exited\");\r\n                // notify all listeners that app has exited\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                emit(\"app:exited\", []);\r\n                navigator.app.exitApp(); // close/exit the app\r\n            }\r\n            else{ // user does not want to exit\r\n                // flag that the app NOT EXITED\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:no-exit\");\r\n                // notify all listeners that app NOT EXITED\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                emit(\"app:no-exit\", []);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Puzzle Levels Button on the menu is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleLevelsButtonClicked(){\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-sound', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // flag that Puzzle Levels Button on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:puzzle-levels-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            await new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:puzzle-levels-clicked\", []));\r\n                }, 0);\r\n            });\r\n\r\n            let willLoadIndex = -1; // holds the load index gotten from the user's confirmation of loading\r\n\r\n\r\n            // flag that the app will soon load the puzzle-levels page if the listeners do not prevent it\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:will-load-page\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            let willLoadPageEvent = await new Promise(function(resolve, reject){\r\n                setTimeout(function(){\r\n                    // lifecycle event object.\r\n                    // listeners can cancel the event that logically follows by setting its cancel property to true\r\n                    let eventObject = {};\r\n                    // define properties for the event object\r\n                    eventObject = Object.defineProperties(eventObject, {\r\n                        \"pageIdToLoad\": {\r\n                            value: \"puzzle-levels-page\",\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: false\r\n                        },\r\n                        \"canCancel\": {\r\n                            value: true,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: false\r\n                        },\r\n                        \"isCanceled\": {\r\n                            get: function(){\r\n                                return typeof this.cancel === \"boolean\" ? this.cancel : new Boolean(this.cancel).valueOf();\r\n                            }.bind(eventObject),\r\n                            set: function(cancellation){},\r\n                            enumerable: true,\r\n                            configurable: false\r\n                        },\r\n                        \"cancel\": {\r\n                            value: false,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        },\r\n                        \"warningMessage\": {\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        }\r\n                    });\r\n\r\n                    // emit the lifecycle stage event to the listeners\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"app:will-load-page\", [eventObject]);\r\n                    // resolve this promise with the event object\r\n                    resolve(eventObject);\r\n                }, 0); // end of setTimeout\r\n            });\r\n\r\n            // check if any listener wishes to forestall a page load\r\n            if(willLoadPageEvent.isCanceled === true){ // listener wants it canceled\r\n                willLoadIndex = await ons.notification.confirm('',\r\n                    {title: '<ons-icon icon=\"md-alert-triangle\" style=\"color: #3f51b5\" size=\"33px\"></ons-icon> <span style=\"color: #3f51b5; display: inline-block; margin-left: 1em;\">Warning</span>',\r\n                        messageHTML: `${willLoadPageEvent.warningMessage}<br><br>Do you want to leave?`,\r\n                        buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'});\r\n\r\n                // check if user decided to load the page\r\n                if(willLoadIndex === 0){ // user decided NOT to load the page\r\n                    // flag that the app DID NOT load the page\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:no-load-page\");\r\n                    // notify all listeners that app DID NOT load the page\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"app:no-load-page\", []);\r\n\r\n                    return; // exit the method immediately\r\n                }\r\n\r\n            }\r\n\r\n            // IF CODE GETS HERE, THEN PAGE CAN BE LOADED\r\n            let totalPagesInStack = $('#app-main-navigator').get(0).pages.length ; // get total number of page presently in the stack\r\n            if(totalPagesInStack > 1){ // if there is more than 1 page\r\n                // hide the Puzzle-Menu page\r\n                await utopiasoftware[utopiasoftware_app_namespace].controller.puzzleMenuPageViewModel.tooglePuzzleMenu();\r\n                // go back all the way to the Puzzle-Levels page i.e. the app's main page\r\n                await $('#app-main-navigator').get(0).popPage({times: $('#app-main-navigator').get(0).pages.length - 1});\r\n            }\r\n            else{ // if there is only 1 page\r\n                // hide the Puzzle-Menu page\r\n                await utopiasoftware[utopiasoftware_app_namespace].controller.puzzleMenuPageViewModel.tooglePuzzleMenu();\r\n            }\r\n\r\n            // flag that the page has loaded\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:loaded-page\");\r\n            // notify all listeners that the page has loaded\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            emit(\"app:loaded-page\", []);\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Background Music switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async backgroundMusicSwitchClicked(){\r\n\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-switch-sound', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // get the current state/status of the background music switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-background-music-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Background Music Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:background-music-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:background-music-clicked\", [{switchOn}]));\r\n                }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Sound Effects switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async soundEffectsSwitchClicked(){\r\n\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-switch-sound', resolve, resolve);\r\n                });\r\n                // wait for 1 sec for switch sound to play before proceeding\r\n                await new Promise(function(resolve, reject){window.setTimeout(resolve, 1000)});\r\n            }\r\n\r\n            // get the current state/status of the Sound Effects switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-sound-effects-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Sound Effects Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:sound-effects-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return await new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:sound-effects-clicked\", [{switchOn}]));\r\n                }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Puzzle Hints switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleHintsSwitchClicked(){\r\n\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-switch-sound', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // get the current state/status of the Puzzle Hints switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-puzzle-hints-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.puzzleHintsOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Puzzle Hints Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:puzzle-hints-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:puzzle-hints-clicked\", [{switchOn}]));\r\n                }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to safely toggle the Puzzle Menu open or close\r\n         */\r\n        async tooglePuzzleMenu(){\r\n            // check if sound effects are allowed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn === true){\r\n                // start play sound\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.play('button-sound', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // toggle the side-menu i.e. the puzzle menu\r\n            return await $('#side-menu').get(0).toggle();\r\n        }\r\n    }\r\n};"]}